{"version":3,"sources":["state/actions.js","state/reducers.js","components/RCard/index.jsx","components/RList/index.jsx","components/RGroupControl/index.jsx","containers/RcList.js","containers/RcOrderControl.js","App.js","serviceWorker.js","index.js"],"names":["types","actions","restaurants","type","option","initialState","orderBy","orderDirection","melpApp","state","arguments","length","undefined","action","Object","objectSpread","RCard","_ref","item","react_default","a","createElement","card","title","name","bordered","href","concat","contact","site","icon","email","toLowerCase","extra","rate","disabled","value","rating","address","street","city","Item","RList","list","es_list","size","dataSource","pagination","pageSize","grid","gutter","xs","sm","lg","renderItem","key","id","components_RCard","Text","RControlGroup","orderByChange","orderDirectionChange","style","padding","strong","es_radio","Group","onChange","Button","marginLeft","listOrderBy","order","_","orderRate","RcList","connect","RcOrderControl","dispatch","e","target","RGroupControl","Title","Header","Content","fetchPath","IconFont","createFromIconfontCN","scriptUrl","App","componentDidMount","_callee","fetchRestaurants","response","regenerator_default","wrap","_context","prev","next","_this","props","fetch","sent","json","t0","message","error","stop","this","layout","color","margin","row","col","span","containers_RcOrderControl","containers_RcList","Component","r","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d6ab173.chunk.js","sourcesContent":["export const types = {\n    FETCH_RESTAURANTS: 'FETCH_RESTAURANTS',\n    CHANGE_ORDERBY: 'CHANGE_ORDERBY',\n    CHANGE_DIRECTION: 'CHANGE_DIRECTION',\n}\n\n/// Actions\nexport const actions = {\n\n    fetchRestaurants: (restaurants) => {\n        return {\n            type: types.FETCH_RESTAURANTS,\n            restaurants\n        }\n    },\n\n    orderByChange: (option) => {\n        return {\n            type: types.CHANGE_ORDERBY,\n            option\n        }\n    },\n\n    orderDirectionChange: (option) => {\n        return {\n            type: types.CHANGE_DIRECTION,\n            option\n        }\n    },\n};","import { types } from './actions';\n\n\nconst initialState = {\n    restaurants: [],\n    orderBy: 0,\n    orderDirection: 'desc'\n};\n\nconst melpApp = (state = initialState, action) => {\n    switch (action.type) {\n\n        case types.FETCH_RESTAURANTS:\n            return {\n                ...state,\n                restaurants: action.restaurants\n            }\n\n        case types.CHANGE_ORDERBY:\n                return {\n                    ...state,\n                    orderBy: action.option\n                }\n        \n        case types.CHANGE_DIRECTION:\n                return {\n                    ...state,\n                    orderDirection: action.option\n                }\n\n        default:\n            return state\n    }\n}\n\nexport default melpApp;","import React from 'react';\nimport { Rate, Card, Icon } from 'antd';\nimport PropTypes from 'prop-types';\n\nconst RCard = ({ item }) => (\n    <Card\n        title={<a>{item.name}</a>}\n        bordered={false}\n        actions={[\n        <a href={`${item.contact.site}`}><Icon type=\"global\" /></a>,\n        <a href={`mailto:${item.contact.email.toLowerCase()}`}><Icon type=\"mail\" /></a>,\n        <a><Icon type=\"phone\" /></a>\n        ]}\n        extra={<Rate disabled value={item.rating} />}>\n        <p><Icon type=\"compass\" /> : {item.address.state}</p>\n        <p>{item.address.street}</p>\n        <p>{item.address.city}</p>\n    </Card>\n);\n\n\nRCard.propTypes = {\n    item: PropTypes.object.isRequired,\n}\n\nexport default RCard;","import React from 'react';\nimport { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport RCard from '../RCard';\nconst { Item } = List;\n\nconst RList = ({ list }) => (\n    <List\n    size=\"large\"\n    dataSource={list}\n    pagination={{\n      pageSize: 12,\n    }}\n    grid={{ gutter: 40,\n      xs: 1,\n      sm: 2,\n      lg: 4,\n    }}\n    renderItem={item => (\n      <Item\n        key={item.id}\n      >\n        <RCard item={item}/>\n      </Item>\n    )}\n  />\n);\n\n\nRList.propTypes = {\n    list: PropTypes.array.isRequired,\n}\n\nexport default RList;","import React from 'react';\nimport { Radio, Icon, Typography } from 'antd';\nimport PropTypes from 'prop-types';\nconst { Text } = Typography;\n\nconst RControlGroup = ({ orderByChange, orderBy, orderDirection, orderDirectionChange}) => (\n    <div style={{ padding: 20 }}>\n        <Text strong>Order by: </Text>\n        <Radio.Group size=\"large\" value={orderBy} onChange={orderByChange}>\n            <Radio.Button value={0}>A-Z</Radio.Button>\n            <Radio.Button value={1}><Icon type=\"star\" /> Rating</Radio.Button>\n        </Radio.Group>\n        <Radio.Group style={{ marginLeft: 20 }} size=\"large\" value={orderDirection} onChange={orderDirectionChange}>\n            <Radio.Button value='asc'><Icon type=\"up-circle\" /></Radio.Button>\n            <Radio.Button value='desc'><Icon type=\"down-circle\" /></Radio.Button>\n        </Radio.Group>\n    </div>\n);\n\n\nRControlGroup.propTypes = {\n    orderBy: PropTypes.number.isRequired,\n    orderDirection: PropTypes.number.isRequired,\n}\n\nexport default RControlGroup;","import { connect } from 'react-redux'\nimport { RList } from '../components';\nimport _ from 'lodash';\n\nconst orderAlpha = (list, order) => _.orderBy(list, 'name', order);\n\nconst orderRate = (list, order) => _.orderBy(list, 'rating', order);\n\nconst listOrderBy = (restaurants, orderBy, orderDirection) => {\n    switch (orderBy) {\n        case 0:\n            return orderAlpha(restaurants, orderDirection);\n\n        case 1:\n            return orderRate(restaurants, orderDirection);\n\n        default:\n            return restaurants;\n    }\n}\n\nconst mapState = state => {\n    const { restaurants, orderBy, orderDirection } = state;\n    const list = listOrderBy(restaurants, orderBy, orderDirection);\n    return {\n        list\n    }\n}\n\nconst RcList = connect(\n    mapState,\n)(RList)\n\nexport default RcList;","import { connect } from 'react-redux'\nimport { RGroupControl } from '../components';\nimport { actions } from '../state/actions';\n\nconst mapState = state => {\n    const { orderBy, orderDirection } = state;\n    return {\n        orderBy,\n        orderDirection\n    }\n}\n\nconst mapDispatch = dispatch => {\n    return {\n        orderByChange: (e) => dispatch(actions.orderByChange(e.target.value)),\n        orderDirectionChange: (e) => dispatch(actions.orderDirectionChange(e.target.value)),\n    }\n}\n\nconst RcOrderControl = connect(\n    mapState,\n    mapDispatch\n)(RGroupControl)\n\nexport default RcOrderControl;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Layout, Row, Col, Typography, Icon, message } from 'antd';\n\nimport './App.css';\nimport RcList from './containers/RcList';\nimport RcOrderControl from './containers/RcOrderControl';\nimport { actions } from './state/actions';\n\nconst { Title } = Typography;\nconst { Header, Content } = Layout;\nconst fetchPath = 'data_melp.json';\nconst IconFont = Icon.createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_1394421_6bzlgwo7j4d.js',\n});\n\nclass App extends Component {\n\n  componentDidMount = async() => {\n    const { fetchRestaurants } = this.props;\n    try {\n      const response = await fetch(fetchPath);\n      const list = await response.json();\n      fetchRestaurants(list);\n    } catch (error) {\n      message.error('Ups! cannot fetch');\n    }    \n  }\n\n  render() {\n    return (\n      <Layout>\n        <Header><Title style={{ color: 'white', padding: 10 }}> <IconFont type=\"iconrestaurant__easyiconnet\" style={{color:'white'}}/> Melp</Title></Header>\n        <Content style={{ margin: 20, }}>\n          <Row gutter={40}>\n            <Col span={10}>\n              <RcOrderControl/>\n            </Col>\n          </Row>\n          <Row gutter={40}>\n            <Col span={24}>\n              <RcList/>\n            </Col>\n          </Row>\n        </Content>\n      </Layout>\n    );\n  }\n}\n\nconst mapDispatch = dispatch => {\n  return {\n    fetchRestaurants: (r) => dispatch(actions.fetchRestaurants(r))\n  }\n};\n\nexport default connect(null, mapDispatch)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport melpApp from './state/reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(melpApp);\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}